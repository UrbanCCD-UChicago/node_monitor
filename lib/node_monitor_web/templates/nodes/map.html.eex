<link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.4/dist/leaflet.css" integrity="sha512-puBpdR0798OZvTTbP4A8Ix/l+A4dHDD0DGqYW6RQ+9jxkRFclaxxQb/SJAWZfWAkuyeQUytO7+7N4QKrDh+drA==" crossorigin="" />
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="https://unpkg.com/leaflet@1.3.4/dist/leaflet.js" integrity="sha512-nMMmRyTVoLYqjP9hrbed9S+FzjZHW5gY1TWCHA5ckwXZBadntCNs8kEqAWdrb9O7rxbCaA4lKTIWjDXZxflOcA==" crossorigin=""></script>

<style>
html, body, main, #map{
  height: 100%;
  width: 100%;
}
</style>

<div id="map"></div>

<script>
let myMap = L.map('map');

L.tileLayer(
  'https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
  attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
  maxZoom: 18,
  id: 'mapbox.dark',
  accessToken: 'pk.eyJ1IjoidmZvcmdpb25lLXVjY2QiLCJhIjoiY2pwbHEwbHFwMDMyOTQ0cmczNnB2OTF0byJ9.GoxEA4ZXPQlHU25TPi54vA'
}).addTo(myMap);

let dataLayer = L.geoJson(<%= raw @nodes %>, {
  // instead of using markers, which are static images in leaflet, we're going
  // to conver the points to layers so we can idicate them with circle
  // markers. this allows us to style them -- essentially color code them for
  // easier visual grepping of system status.
  pointToLayer: function (f, latlon) {
    let mrkr = L.circleMarker(latlon, { radius: 6, weight: 1, opacity: 1, fillOpacity: 0.6 });
    return mrkr;
  },
  // this sets the style of the circle marker
  style: function (f) {
    switch (f.properties.color) {
      case 'red': return { color: '#ff0014' };
      case 'orange': return { color: '#ff7b0a' };
      case 'yellow': return { color: '#f0ff0a' };
      case 'blue': return { color: '#004ff0' };
      case 'green': return { color: '#14ff24' };
    }
  },
  // this is where we process each feature: set up popup text, update the
  // status counts, etc.
  onEachFeature: function (f, featureLayer) {
    // setup the popup text for each marker's onClick event
    let popup = `
    <table style="line-height:0.7em;">
      <tr>
        <th>ID</th>
        <td>${f.properties.id}</td>
      </tr>
      <tr>
        <th>VSN</th>
        <td>${f.properties.vsn}</td>
      </tr>
      <tr>
        <th>Location</th>
        <td>${f.geometry.coordinates}</td>
      </tr>
      <tr>
        <th>Address</th>
        <td>${f.properties.address}</td>
      </tr>
      <tr>
        <th>Description</th>
        <td>${f.properties.description}</td>
      </tr>
      <tr>
        <th>Missing Boot Events</th>
        <td>${f.properties.missing_boot_info}</td>
      </tr>
      <tr>
        <th>Missing Sensors</th>
        <td>${f.properties.missing_sensors}</td>
      </tr>
      <tr>
        <th>NC Time Drift</th>
        <td>${f.properties.nc_drift}</td>
      </tr>
      <tr>
        <th>EP Time Drift</th>
        <td>${f.properties.ep_drift}</td>
      </tr>
      <tr>
        <th>Missing BCam</th>
        <td>${f.properties.no_bcam}</td>
      </tr>
      <tr>
        <th>Missing TCam</th>
        <td>${f.properties.no_tcam}</td>
      </tr>
      <tr>
        <th>Missing Mic</th>
        <td>${f.properties.no_mic}</td>
      </tr>
    </table>

    <a href="/nodes/${f.properties.id}" target="_blank">Go to details page</a>
    `;
    // bind the text
    featureLayer.bindPopup(popup);
  }
}).addTo(myMap);

// recenter map
myMap.fitBounds(dataLayer.getBounds());
</script>
